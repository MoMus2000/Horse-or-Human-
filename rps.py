# -*- coding: utf-8 -*-
"""RPS.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hYw2mRlQlyFbez8kC___S-k9KW4icQ7n
"""

import tensorflow as tf
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.layers import Conv2D, Dense, MaxPooling2D, Flatten , BatchNormalization, Dropout
import numpy as np
from tensorflow.keras.models import Sequential

from google.colab import files
files.upload()

!pip install -q kaggle
!mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle/
!ls ~/.kaggle
!chmod 600 /root/.kaggle/kaggle.json

!kaggle datasets download -d drgfreeman/rockpaperscissors

!unzip /content/rockpaperscissors.zip

train_datagen = ImageDataGenerator(rescale=1./255,
                                      validation_split=0.2,
                                      horizontal_flip = True,fill_mode='nearest')
train_generator = train_datagen.flow_from_directory('/content/rps-cv-images',shuffle=True, subset='training', batch_size=32,
                                                    target_size=(300,200),class_mode='categorical')
val_generator = train_datagen.flow_from_directory('/content/rps-cv-images',shuffle=True,subset='validation',batch_size=32,
                                                  target_size=(300,200),class_mode='categorical')

model = Sequential()
model.add(Conv2D(32,3,input_shape = (300,200,3), activation = 'relu', padding = 'same',kernel_initializer='he_normal'))
model.add(MaxPooling2D(2,2))
model.add(BatchNormalization(axis=-1))
model.add(Dropout(0.25))

model.add(Conv2D(64,3,activation='relu', kernel_initializer='he_normal',padding='same'))
model.add(BatchNormalization(axis=-1))
model.add(Conv2D(64,3,activation='relu', kernel_initializer='he_normal',padding='same'))
model.add(BatchNormalization(axis=-1))
model.add(MaxPooling2D(2,2))
model.add(Dropout(0.25))

model.add(Conv2D(64,3,activation='relu', kernel_initializer='he_normal',padding='same'))
model.add(BatchNormalization(axis=-1))
model.add(Conv2D(64,3,activation='relu', kernel_initializer='he_normal',padding='same'))
model.add(BatchNormalization(axis=-1))
model.add(MaxPooling2D(2,2))
model.add(Dropout(0.25))

model.add(Conv2D(128,3,activation='relu', kernel_initializer='he_normal',padding='same'))
model.add(BatchNormalization(axis=-1))
model.add(Conv2D(128,3,activation='relu', kernel_initializer='he_normal',padding='same'))
model.add(BatchNormalization(axis=-1))
model.add(MaxPooling2D(2,2))
model.add(Dropout(0.25))

model.add(Conv2D(256,3,activation='relu', kernel_initializer='he_normal',padding='same'))
model.add(BatchNormalization(axis=-1))
model.add(Conv2D(256,3,activation='relu', kernel_initializer='he_normal',padding='same'))
model.add(BatchNormalization(axis=-1))
model.add(MaxPooling2D(2,2))
model.add(Dropout(0.25))

model.add(Flatten())
model.add(Dense(512, activation='relu'))
model.add(BatchNormalization())
model.add(Dense(256, activation='relu'))
model.add(BatchNormalization())
model.add(Dropout(0.25))
model.add(Dense(3, activation='softmax'))

model.compile(loss = 'categorical_crossentropy', optimizer = tf.keras.optimizers.Adam(), metrics = ['accuracy'])

history = model.fit(train_generator , validation_data=val_generator , epochs=25 , steps_per_epoch=len(train_generator))

from google.colab import files 
files.upload()

import cv2
img = cv2.imread('/content/rock-paper-scissors-hand-game-png-favpng-P3kxYGwKqGLrm6vBcR4qVamv7.jpg')
img = cv2.resize(img,(300,200))
img = np.reshape(img,[-1,300,200,3])
img = img/255.0

prediction = np.argmax(model.predict(img), axis=-1)
label_map = (train_generator.class_indices)
print(label_map)
print(prediction)